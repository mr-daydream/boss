###############################################################################
#
# IAR C/C++ Compiler V7.10.1.973/W32 for MSP430           29/Apr/2017  11:59:06
# Copyright 1996-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for Texas Instruments MSP430, Evaluation Version 7.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  
#        C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS
#        1155\Components\simpliciti\nwk\nwk_globals.c
#    Command line  =  
#        -f C:\Users\MSCOTT~1\AppData\Local\Temp\EW97CB.tmp (-f
#        "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS
#        1155\Configuration\smpl_config_AP.dat" (-DNUM_CONNECTIONS=8
#        -DSIZE_INFRAME_Q=6 -DSIZE_OUTFRAME_Q=2 "-DTHIS_DEVICE_ADDRESS={0x78,
#        0x56, 0x34, 0x12}" -DACCESS_POINT -DAP_IS_DATA_HUB
#        -DNUM_STORE_AND_FWD_CLIENTS=3 -DSTARTUP_JOINCONTEXT_ON) -f
#        "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS
#        1155\Configuration\smpl_nwk_config.dat" (-DMAX_HOPS=3
#        -DMAX_HOPS_FROM_AP=1 -DMAX_NWK_PAYLOAD=9 -DMAX_APP_PAYLOAD=10
#        -DDEFAULT_LINK_TOKEN=0x01020304 -DDEFAULT_JOIN_TOKEN=0x05060708
#        -DEXTENDED_API -DSW_TIMER) "C:\Users\mscottnelson\Downloads\IAR BOSS
#        1155\IAR BOSS 1155\Components\simpliciti\nwk\nwk_globals.c" -D
#        MRFI_CC2500 -lcN "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR
#        BOSS 1155\CC2500 Sensor Demo-Access Point\List" -o
#        "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS 1155\CC2500
#        Sensor Demo-Access Point\Obj" --debug -D__MSP430F2274__ -e --double=32
#        --clib -I "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS
#        1155\Components\bsp\" -I "C:\Users\mscottnelson\Downloads\IAR BOSS
#        1155\IAR BOSS 1155\Components\bsp\drivers\" -I
#        "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS
#        1155\Components\bsp\boards\EZ430RF\" -I
#        "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS
#        1155\Components\mrfi\" -I "C:\Users\mscottnelson\Downloads\IAR BOSS
#        1155\IAR BOSS 1155\Components\SimpliciTI\nwk\" -I
#        "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS
#        1155\Components\SimpliciTI\nwk_applications\" -Ohz
#        --require_prototypes --hw_workaround=nop_after_lpm)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS 1155\CC2500
#        Sensor Demo-Access Point\List\nwk_globals.lst
#    Object file   =  
#        C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS 1155\CC2500
#        Sensor Demo-Access Point\Obj\nwk_globals.r43
#
###############################################################################

C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS 1155\Components\simpliciti\nwk\nwk_globals.c
      1          /**************************************************************************************************
      2            Filename:       nwk_globals.c
      3            Revised:        $Date: 2009-10-27 20:48:11 -0700 (Tue, 27 Oct 2009) $
      4            Revision:       $Revision: 20995 $
      5          
      6            Description:    This file manages global NWK data.
      7          
      8            Copyright 2007-2009 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights granted under
     11            the terms of a software license agreement between the user who downloaded the software,
     12            his/her employer (which must be your employer) and Texas Instruments Incorporated (the
     13            "License"). You may not use this Software unless you agree to abide by the terms of the
     14            License. The License limits your use, and you acknowledge, that the Software may not be
     15            modified, copied or distributed unless embedded on a Texas Instruments microcontroller
     16            or used solely and exclusively in conjunction with a Texas Instruments radio frequency
     17            transceiver, which is integrated into your product. Other than for the foregoing purpose,
     18            you may not use, reproduce, copy, prepare derivative works of, modify, distribute,
     19            perform, display or sell this Software and/or its documentation for any purpose.
     20          
     21            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS”
     22            WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY
     23            WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.
     24            IN NO EVENT SHALL TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     25            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL EQUITABLE
     26            THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO ANY
     27            INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST
     28            DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY
     29            THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     30          
     31            Should you have any questions regarding your right to use this Software,
     32            contact Texas Instruments Incorporated at www.TI.com.
     33          **************************************************************************************************/
     34          
     35          
     36          /******************************************************************************
     37           * INCLUDES
     38           */
     39          #include <string.h>
     40          #include "bsp.h"
     41          #include "mrfi.h"
     42          #include "nwk_types.h"
     43          #include "nwk_globals.h"
     44          
     45          /******************************************************************************
     46           * MACROS
     47           */
     48          
     49          /******************************************************************************
     50           * CONSTANTS AND DEFINES
     51           */
     52          
     53          /******************************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /******************************************************************************
     58           * LOCAL VARIABLES
     59           */
     60          static const addr_t   sMyROMAddress = THIS_DEVICE_ADDRESS;
     61          static addr_t         sAPAddress;
     62          static addr_t         sMyRAMAddress;
     63          static uint8_t        sRAMAddressIsSet = 0;
     64          
     65          /* Version number set as a 4 byte quantity. Each byte is a revision number
     66           * in the form w.x.y.z. The subfields are each limited to values 0x0-0xFF.
     67           */
     68          static const smplVersionInfo_t sVersionInfo = {
     69                                                          0x02,  /* protocol version */
     70                                                          0x01,  /* major revision number */
     71                                                          0x01,  /* minor revision number */
     72                                                          0x01,  /* maintenance release number */
     73                                                          0x00   /* special release */
     74                                                         };
     75          
     76          /******************************************************************************
     77           * LOCAL FUNCTIONS
     78           */
     79          
     80          /******************************************************************************
     81           * GLOBAL VARIABLES
     82           */
     83          
     84          /******************************************************************************
     85           * GLOBAL FUNCTIONS
     86           */
     87          
     88          /******************************************************************************
     89           * @fn          nwk_globalsInit
     90           *
     91           * @brief       Initialization of global symbols
     92           *
     93           * input parameters
     94           *
     95           * output parameters
     96           *
     97           * @return   void
     98           */
     99          void nwk_globalsInit(void)
    100          {
    101          
    102            memset(&sAPAddress, 0x00, sizeof(addr_t));
    103          
    104            /* populate RAM address from ROM default if it hasn't laready been set
    105             * using the IOCTL interface.
    106             */
    107            if (!sRAMAddressIsSet)
    108            {
    109              memcpy(&sMyRAMAddress, &sMyROMAddress, sizeof(addr_t));
    110              sRAMAddressIsSet = 1;  /* RAM address is now valid */
    111            }
    112          
    113            return;
    114          }
    115          
    116          /******************************************************************************
    117           * @fn          nwk_getMyAddress
    118           *
    119           * @brief       Return a pointer to my address. It comes either from ROM as
    120           *              set in the configuration file or it was set using the IOCTL
    121           *              interface -- probably from random bytes.
    122           *
    123           * input parameters
    124           *
    125           * output parameters
    126           *
    127           * @return   pointer to a constant address type object.
    128           */
    129          addr_t const *nwk_getMyAddress(void)
    130          {
    131            /* This call supports returning a valid pointer before either the
    132             * initialization or external setting of the address. But caller needs
    133             * to be careful -- if this routine is called immediately it will return
    134             * the ROM address. If the application then sets the address using the
    135             * IOCTL before doing the SMPL_Init() the original pointer is no longer
    136             * valid as it points to the wrong address.
    137             */
    138            return sRAMAddressIsSet ? &sMyRAMAddress : &sMyROMAddress;
    139          }
    140          
    141          /******************************************************************************
    142           * @fn          nwk_getFWVersion
    143           *
    144           * @brief       Return a pointer to the current firmware version string.
    145           *
    146           * input parameters
    147           *
    148           * output parameters
    149           *
    150           * @return   pointer to a constant uint16_t object.
    151           */
    152          uint8_t const *nwk_getFWVersion()
    153          {
    154            return sVersionInfo.fwVerString;
    155          }
    156          
    157          /******************************************************************************
    158           * @fn          nwk_getProtocolVersion
    159           *
    160           * @brief       Return the current protocol version.
    161           *
    162           * input parameters
    163           *
    164           * output parameters
    165           *
    166           * @return   Protocol version.
    167           */
    168          uint8_t nwk_getProtocolVersion(void)
    169          {
    170            return sVersionInfo.protocolVersion;
    171          }
    172          
    173          /******************************************************************************
    174           * @fn          nwk_setMyAddress
    175           *
    176           * @brief       Set my address object if it hasn't already been set. This call
    177           *              is referenced by the IOCTL support used to change the device
    178           *              address. It is effective only if the address has not already
    179           *              been set.
    180           *
    181           * input parameters
    182           *
    183           * @param   addr  - pointer to the address object to be used to set my address.
    184           *
    185           * output parameters
    186           *
    187           * @return   Returns non-zero if request is respected, otherwise returns 0.
    188           */
    189          uint8_t nwk_setMyAddress(addr_t *addr)
    190          {
    191            uint8_t rc = 0;
    192          
    193            if (!sRAMAddressIsSet)
    194            {
    195              memcpy(&sMyRAMAddress, addr, sizeof(addr_t));
    196              sRAMAddressIsSet = 1;  /* RAM address is now valid */
    197              rc = 1;
    198            }
    199          
    200            return rc;
    201          }
    202          
    203          /******************************************************************************
    204           * @fn          nwk_setAPAddress
    205           *
    206           * @brief       Set the AP's address. Called after the AP address is gleaned
    207           *              from the Join reply.
    208           *
    209           * input parameters
    210           *
    211           * output parameters
    212           *
    213           * @return   void
    214           */
    215          void nwk_setAPAddress(addr_t *addr)
    216          {
    217          
    218            memcpy((void *)&sAPAddress, (void *)addr, NET_ADDR_SIZE);
    219          
    220            return;
    221          }
    222          
    223          /******************************************************************************
    224           * @fn          nwk_getAPAddress
    225           *
    226           * @brief       Get the AP's address.
    227           *
    228           * input parameters
    229           *
    230           * output parameters
    231           *
    232           * @return   Pointer to a constant address object or null if the address has not
    233           *           yet been set.
    234           */
    235          addr_t const *nwk_getAPAddress(void)
    236          {
    237            addr_t addr;
    238          
    239            memset(&addr, 0x0, sizeof(addr));
    240          
    241            return !memcmp(&sAPAddress, &addr, NET_ADDR_SIZE) ? 0 : &sAPAddress;
    242          }
    243          
    244          /******************************************************************************
    245           * @fn          nwk_getBCastAddress
    246           *
    247           * @brief       Get the network broadcast address.
    248           *
    249           * input parameters
    250           *
    251           * output parameters
    252           *
    253           * @return   Pointer to a constant address object.
    254           */
    255          addr_t const *nwk_getBCastAddress(void)
    256          {
    257            return (addr_t const *)mrfiBroadcastAddr;
    258          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   nwk_getAPAddress
        6   -> memcmp
        6   -> memset
      2   nwk_getBCastAddress
      2   nwk_getFWVersion
      2   nwk_getMyAddress
      2   nwk_getProtocolVersion
      2   nwk_globalsInit
        4   -> memcpy
        2   -> memset
      2   nwk_setAPAddress
        0   -> memcpy
      2   nwk_setMyAddress
        4   -> memcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?Subroutine0
      40  nwk_getAPAddress
       6  nwk_getBCastAddress
       6  nwk_getFWVersion
      18  nwk_getMyAddress
       4  nwk_getProtocolVersion
      30  nwk_globalsInit
      12  nwk_setAPAddress
      22  nwk_setMyAddress
       4  sAPAddress
       4  sMyRAMAddress
       4  sMyROMAddress
       1  sRAMAddressIsSet
       5  sVersionInfo

 
 152 bytes in segment CODE
   9 bytes in segment DATA16_C
   9 bytes in segment DATA16_Z
 
 152 bytes of CODE  memory
   9 bytes of CONST memory
   9 bytes of DATA  memory

Errors: none
Warnings: none
