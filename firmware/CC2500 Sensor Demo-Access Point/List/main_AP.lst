###############################################################################
#
# IAR C/C++ Compiler V7.10.1.973/W32 for MSP430           30/Apr/2017  02:05:43
# Copyright 1996-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for Texas Instruments MSP430, Evaluation Version 7.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  
#        C:\Users\mscottnelson\Documents\GitHub\boss\firmware\Applications\main_AP.c
#    Command line  =  
#        -f C:\Users\MSCOTT~1\AppData\Local\Temp\EWB1D4.tmp (-f
#        C:\Users\mscottnelson\Documents\GitHub\boss\firmware\Configuration\smpl_config_AP.dat
#        (-DNUM_CONNECTIONS=8 -DSIZE_INFRAME_Q=6 -DSIZE_OUTFRAME_Q=2
#        "-DTHIS_DEVICE_ADDRESS={0x78, 0x56, 0x34, 0x12}" -DACCESS_POINT
#        -DAP_IS_DATA_HUB -DNUM_STORE_AND_FWD_CLIENTS=3
#        -DSTARTUP_JOINCONTEXT_ON) -f
#        C:\Users\mscottnelson\Documents\GitHub\boss\firmware\Configuration\smpl_nwk_config.dat
#        (-DMAX_HOPS=3 -DMAX_HOPS_FROM_AP=1 -DMAX_NWK_PAYLOAD=9
#        -DMAX_APP_PAYLOAD=10 -DDEFAULT_LINK_TOKEN=0x01020304
#        -DDEFAULT_JOIN_TOKEN=0x05060708 -DEXTENDED_API -DSW_TIMER)
#        C:\Users\mscottnelson\Documents\GitHub\boss\firmware\Applications\main_AP.c
#        -D MRFI_CC2500 -lcN
#        "C:\Users\mscottnelson\Documents\GitHub\boss\firmware\CC2500 Sensor
#        Demo-Access Point\List" -o
#        "C:\Users\mscottnelson\Documents\GitHub\boss\firmware\CC2500 Sensor
#        Demo-Access Point\Obj" --debug -D__MSP430F2274__ -e --double=32 --clib
#        -I
#        C:\Users\mscottnelson\Documents\GitHub\boss\firmware\Components\bsp\
#        -I
#        C:\Users\mscottnelson\Documents\GitHub\boss\firmware\Components\bsp\drivers\
#        -I
#        C:\Users\mscottnelson\Documents\GitHub\boss\firmware\Components\bsp\boards\EZ430RF\
#        -I
#        C:\Users\mscottnelson\Documents\GitHub\boss\firmware\Components\mrfi\
#        -I
#        C:\Users\mscottnelson\Documents\GitHub\boss\firmware\Components\SimpliciTI\nwk\
#        -I
#        C:\Users\mscottnelson\Documents\GitHub\boss\firmware\Components\SimpliciTI\nwk_applications\
#        -Ohz --require_prototypes --hw_workaround=nop_after_lpm)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\mscottnelson\Documents\GitHub\boss\firmware\CC2500 Sensor
#        Demo-Access Point\List\main_AP.lst
#    Object file   =  
#        C:\Users\mscottnelson\Documents\GitHub\boss\firmware\CC2500 Sensor
#        Demo-Access Point\Obj\main_AP.r43
#
###############################################################################

C:\Users\mscottnelson\Documents\GitHub\boss\firmware\Applications\main_AP.c
      1          //
      2          // Bed Occupancy Sensor Suite - Access Point (BOSS-AP) main_AP.c
      3          // by SH, MESN, JC, LS for Baltimore Hackathon project BOSS.
      4          // adapted from TI ez430-RF2500 Sensor Demo project.
      5          // 4/29/2017
      6          //
      7          
      8          
      9          //******************************************************************************
     10          // THIS PROGRAM IS PROVIDED "AS IS". TI MAKES NO WARRANTIES OR
     11          // REPRESENTATIONS, EITHER EXPRESS, IMPLIED OR STATUTORY,
     12          // INCLUDING ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
     13          // FOR A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR
     14          // COMPLETENESS OF RESPONSES, RESULTS AND LACK OF NEGLIGENCE.
     15          // TI DISCLAIMS ANY WARRANTY OF TITLE, QUIET ENJOYMENT, QUIET
     16          // POSSESSION, AND NON-INFRINGEMENT OF ANY THIRD PARTY
     17          // INTELLECTUAL PROPERTY RIGHTS WITH REGARD TO THE PROGRAM OR
     18          // YOUR USE OF THE PROGRAM.
     19          //
     20          // IN NO EVENT SHALL TI BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
     21          // CONSEQUENTIAL OR INDIRECT DAMAGES, HOWEVER CAUSED, ON ANY
     22          // THEORY OF LIABILITY AND WHETHER OR NOT TI HAS BEEN ADVISED
     23          // OF THE POSSIBILITY OF SUCH DAMAGES, ARISING IN ANY WAY OUT
     24          // OF THIS AGREEMENT, THE PROGRAM, OR YOUR USE OF THE PROGRAM.
     25          // EXCLUDED DAMAGES INCLUDE, BUT ARE NOT LIMITED TO, COST OF
     26          // REMOVAL OR REINSTALLATION, COMPUTER TIME, LABOR COSTS, LOSS
     27          // OF GOODWILL, LOSS OF PROFITS, LOSS OF SAVINGS, OR LOSS OF
     28          // USE OR INTERRUPTION OF BUSINESS. IN NO EVENT WILL TI'S
     29          // AGGREGATE LIABILITY UNDER THIS AGREEMENT OR ARISING OUT OF
     30          // YOUR USE OF THE PROGRAM EXCEED FIVE HUNDRED DOLLARS
     31          // (U.S.$500).
     32          //
     33          // Unless otherwise stated, the Program written and copyrighted
     34          // by Texas Instruments is distributed as "freeware".  You may,
     35          // only under TI's copyright in the Program, use and modify the
     36          // Program without any charge or restriction.  You may
     37          // distribute to third parties, provided that you transfer a
     38          // copy of this license to the third party and the third party
     39          // agrees to these terms by its first use of the Program. You
     40          // must reproduce the copyright notice and any other legend of
     41          // ownership on each copy or partial copy, of the Program.
     42          //
     43          // You acknowledge and agree that the Program contains
     44          // copyrighted material, trade secrets and other TI proprietary
     45          // information and is protected by copyright laws,
     46          // international copyright treaties, and trade secret laws, as
     47          // well as other intellectual property laws.  To protect TI's
     48          // rights in the Program, you agree not to decompile, reverse
     49          // engineer, disassemble or otherwise translate any object code
     50          // versions of the Program to a human-readable form.  You agree
     51          // that in no event will you alter, remove or destroy any
     52          // copyright notice included in the Program.  TI reserves all
     53          // rights not specifically granted under this license. Except
     54          // as specifically provided herein, nothing in this agreement
     55          // shall be construed as conferring by implication, estoppel,
     56          // or otherwise, upon you, any license or other right under any
     57          // TI patents, copyrights or trade secrets.
     58          //
     59          // You may not use the Program in non-TI devices.
     60          //
     61          //******************************************************************************
     62          //   eZ430-RF2500 Temperature Sensor Access Point
     63          //
     64          //   Description: This is the Access Point software for the eZ430-2500RF
     65          //                Temperature Sensing demo
     66          //
     67          //
     68          //   Z. Shivers
     69          //   Version    1.05
     70          //   Texas Instruments, Inc
     71          //   July 2010
     72          //     IAR Embedded Workbench Kickstart (Version: 5.10.4)
     73          //     Code Composer Studio (Version 4.1.2.00027)
     74          //******************************************************************************
     75          //Change Log:
     76          //******************************************************************************
     77          //Version:  1.05
     78          //Comments: Added support for various baud rates dependent on CPU frequencies
     79          //Version:  1.04
     80          //Comments: Added support for SimpliciTI 1.1.1
     81          //          Replaced delays with __delay_cycles() instrinsic
     82          //          Added more comments
     83          //Version:  1.03
     84          //Comments: Added support for SimpliciTI 1.1.0
     85          //          Added support for Code Composer Studio
     86          //          Added security (Enabled with -DSMPL_SECURE in smpl_nwk_config.dat)
     87          //          Added acknowledgement (Enabled with -DAPP_AUTO_ACK in smpl_nwk_config.dat)
     88          //          Based the modifications on the AP_as_Data_Hub example code
     89          //Version:  1.02
     90          //Comments: Changed Port toggling to abstract method
     91          //          Removed ToggleLED
     92          //          Fixed comment typos/errors
     93          //          Changed startup string to 1.02
     94          //Version:  1.01
     95          //Comments: Added support for SimpliciTI 1.0.3
     96          //          Changed RSSI read method
     97          //          Added 3 digit temperature output for 100+F
     98          //          Changed startup string to 1.01
     99          //Version:  1.00
    100          //Comments: Initial Release Version
    101          //******************************************************************************
    102          #include <string.h>
    103          #include "bsp.h"
    104          #include "mrfi.h"
    105          #include "bsp_leds.h"
    106          #include "bsp_buttons.h"
    107          #include "nwk_types.h"
    108          #include "nwk_api.h"
    109          #include "nwk_frame.h"
    110          #include "nwk.h"
    111          #include "virtual_com_cmds.h"
    112          
    113          /****************** COMMENTS ON ASYNC LISTEN APPLICATION ***********************
    114          Summary:
    115            This AP build includes implementation of an unknown number of end device peers
    116            in addition to AP functionality. In this scenario all End Devices establish a
    117            link to the AP and only to the AP. The AP acts as a data hub. All End Device
    118            peers are on the AP and not on other distinct ED platforms.
    119          
    120            There is still a limit to the number of peers supported on the AP that is
    121            defined by the macro NUM_CONNECTIONS. The AP will support NUM_CONNECTIONS or
    122            fewer peers but the exact number does not need to be known at build time.
    123          
    124            In this special but common scenario SimpliciTI restricts each End Device
    125            object to a single connection to the AP. If multiple logical connections are
    126            required these must be accommodated by supporting contexts in the application
    127            payload itself.
    128          
    129          Solution overview:
    130            When a new peer connection is required the AP main loop must be notified. In
    131            essence the main loop polls a semaphore to know whether to begin listening for
    132            a peer Link request from a new End Device. There are two solutions: automatic
    133            notification and external notification. The only difference between the
    134            automatic notification solution and the external notification solution is how
    135            the listen semaphore is set. In the external notification solution the
    136            sempahore is set by the user when the AP is stimulated for example by a button
    137            press or a commend over a serial link. In the automatic scheme the
    138            notification is accomplished as a side effect of a new End Device joining.
    139          
    140            The Rx callback must be implemented. When the callback is invoked with a
    141            non-zero Link ID the handler could set a semaphore that alerts the main work
    142            loop that a SMPL_Receive() can be executed successfully on that Link ID.
    143          
    144            If the callback conveys an argument (LinkID) of 0 then a new device has joined
    145            the network. A SMPL_LinkListen() should be executed.
    146          
    147            Whether the joining device supports ED objects is indirectly inferred on the
    148            joining device from the setting of the NUM_CONNECTIONS macro. The value of
    149            this macro should be non-zero only if ED objects exist on the device. This
    150            macro is always non-zero for ED-only devices. But Range Extenders may or may
    151            not support ED objects. The macro should be be set to 0 for REs that do not
    152            also support ED objects. This prevents the Access Point from reserving
    153            resources for a joinng device that does not support any End Device Objects and
    154            it prevents the AP from executing a SMPL_LinkListen(). The Access Point will
    155            not ever see a Link frame if the joining device does not support any
    156            connections.
    157          
    158            Each joining device must execute a SMPL_Link() after receiving the join reply
    159            from the Access Point. The Access Point will be listening.
    160          
    161          ******************* END COMMENTS ON ASYNC LISTEN APPLICATION ******************/
    162          
    163          /******  THIS SOURCE FILE REPRESENTS THE AUTOMATIC NOTIFICATION SOLUTION ******/
    164          
    165          /*------------------------------------------------------------------------------
    166           * Prototypes
    167           *----------------------------------------------------------------------------*/
    168          /* Frequency Agility helper functions */
    169          static void    checkChangeChannel(void);
    170          static void    changeChannel(void);
    171          
    172          __interrupt void ADC10_ISR(void);
    173          __interrupt void Timer_A (void);
    174          
    175          /*------------------------------------------------------------------------------
    176           * Globals
    177           *----------------------------------------------------------------------------*/
    178          /* reserve space for the maximum possible peer Link IDs */
    179          static linkID_t sLID[NUM_CONNECTIONS] = {0};
    180          static uint8_t  sNumCurrentPeers = 0;
    181          
    182          /* callback handler */
    183          static uint8_t sCB(linkID_t);
    184          
    185          /* received message handler */
    186          static void processMessage(linkID_t, uint8_t *, uint8_t);
    187          
    188          /* work loop semaphores */
    189          static volatile uint8_t sPeerFrameSem = 0;
    190          static volatile uint8_t sJoinSem = 0;
    191          static volatile uint8_t sSelfMeasureSem = 0;
    192          
    193          /* blink LEDs when channel changes... */
    194          static volatile uint8_t sBlinky = 0;
    195          
    196          /* data for terminal output */
    197          //const char splash[] = {"\r\n--------------------------------------------------  \r\n     ****\r\n     ****           eZ430-RF2500(BC)\r\n     ******o****    Bed Count Sensor Network\r\n********_///_****   Copyright 2009\r\n ******/_//_/*****  Texas Instruments Incorporated\r\n  ** ***(__/*****   All rights reserved.\r\n      *********     SimpliciTI1.1.1\r\n       *****\r\n        ***\r\n--------------------------------------------------\r\n"};
    198          const char splash[] = {"\r\n________________________________________________________________________________________________\n\nez430-RF2500(BC) - Bed Count Sensor Network AP\n\nBased upon Texas Instruments ez430-RF2500 Wireless Sensor Demo\n\n(c) Tek Terrain LLC, 2017\n\n________________________________________________________________________________________________\r\n\n"};
    199          volatile int * tempOffset = (int *)0x10F4;
    200          
    201          /*------------------------------------------------------------------------------
    202           * Frequency Agility support (interference detection)
    203           *----------------------------------------------------------------------------*/
    204          #ifdef FREQUENCY_AGILITY
    205          
    206          #define INTERFERNCE_THRESHOLD_DBM (-70)
    207          #define SSIZE    25
    208          #define IN_A_ROW  3
    209          static int8_t  sSample[SSIZE];
    210          static uint8_t sChannel = 0;
    211          
    212          #endif  /* FREQUENCY_AGILITY */
    213          
    214          /*------------------------------------------------------------------------------
    215           * Main
    216           *----------------------------------------------------------------------------*/
    217          void main (void)
    218          {
    219            bspIState_t intState;
    220          
    221          #ifdef FREQUENCY_AGILITY
    222            memset(sSample, 0x0, sizeof(sSample));
    223          #endif
    224          
    225            /* Initialize board */
    226            BSP_Init();
    227          
    228            /* Initialize TimerA and oscillator */
    229            BCSCTL3 |= LFXT1S_2;                      // LFXT1 = VLO
    230            TACCTL0 = CCIE;                           // TACCR0 interrupt enabled
    231            TACCR0 = 12000;                           // ~1 second
    232            TACTL = TASSEL_1 + MC_1;                  // ACLK, upmode
    233          
    234            /* Initialize serial port */
    235            COM_Init();
    236          
    237            //Transmit splash screen and network init notification
    238            TXString( (char*)splash, sizeof splash);
    239            TXString( "\r\nInitializing Network....", 26 );
    240          
    241            SMPL_Init(sCB);
    242          
    243            // network initialized
    244            TXString( "Done\r\n", 6);
    245          
    246            /* green and red LEDs on solid to indicate waiting for a Join. */
    247            BSP_TURN_ON_LED1();
    248            BSP_TURN_ON_LED2();
    249          
    250            /* main work loop */
    251            while (1)
    252            {
    253              /* Wait for the Join semaphore to be set by the receipt of a Join frame from
    254               * a device that supports an End Device.
    255               *
    256               * An external method could be used as well. A button press could be connected
    257               * to an ISR and the ISR could set a semaphore that is checked by a function
    258               * call here, or a command shell running in support of a serial connection
    259               * could set a semaphore that is checked by a function call.
    260               */
    261              if (sJoinSem && (sNumCurrentPeers < NUM_CONNECTIONS))
    262              {
    263                /* listen for a new connection */
    264                while (1)
    265                {
    266                  if (SMPL_SUCCESS == SMPL_LinkListen(&sLID[sNumCurrentPeers]))
    267                  {
    268                    break;
    269                  }
    270                  /* Implement fail-to-link policy here. otherwise, listen again. */
    271                }
    272          
    273                sNumCurrentPeers++;
    274          
    275                BSP_ENTER_CRITICAL_SECTION(intState);
    276                sJoinSem--;
    277                BSP_EXIT_CRITICAL_SECTION(intState);
    278              }
    279          
    280          
    281              // if it is time to measure our own temperature...
    282              if(sSelfMeasureSem)
    283              {
    284                char msg [7];
    285                char addr[] = {"HUB0"};
    286                char rssi[] = {"000"};
    287                int degC, volt, bend;
    288                volatile long temp;
    289                int results[6];
    290          ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    291                /* Get temperature */
    292                ADC10CTL1 = INCH_10 + ADC10DIV_4;       // Temp Sensor ADC10CLK/5
    293                ADC10CTL0 = SREF_1 + ADC10SHT_3 + REFON + ADC10ON + ADC10IE + ADC10SR;
    294                /* Allow ref voltage to settle for at least 30us (30us * 8MHz = 240 cycles)
    295                 * See SLAS504D for settling time spec
    296                 */
    297                __delay_cycles(240);
    298                ADC10CTL0 |= ENC + ADC10SC;             // Sampling and conversion start
    299                __bis_SR_register(CPUOFF + GIE);        // LPM0 with interrupts enabled
    300                results[0] = ADC10MEM;                  // Retrieve result
    301          
    302                ADC10CTL0 &= ~ENC;
    303          ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    304                /* Get voltage */
    305                ADC10CTL1 = INCH_11;                     // AVcc/2
    306                ADC10CTL0 = SREF_1 + ADC10SHT_2 + REFON + ADC10ON + ADC10IE + REF2_5V;
    307                __delay_cycles(240);
    308                ADC10CTL0 |= ENC + ADC10SC;             // Sampling and conversion start
    309                __bis_SR_register(CPUOFF + GIE);        // LPM0 with interrupts enabled
    310                results[1] = ADC10MEM;                  // Retrieve result
    311          
    312                /* Stop and turn off ADC */
    313                ADC10CTL0 &= ~ENC;
    314                ADC10CTL0 &= ~(REFON + ADC10ON);
    315            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    316          //////////////////////////////////////////////////////////////////////////////////////////////////
    317          /* SH Get voltage from Channel A0 (P2.0/ACLK/A0/OA010) */     
    318          // SH add in results channel 2 for flex resistor sensor with 25K (nominal), 45K (minimum), 125K(max) bend
    319               
    320                ADC10CTL1 = INCH_0;                     // selects channel 0 
    321                ADC10CTL0 = SREF_1 + ADC10SHT_2 + REFON + ADC10ON + ADC10IE + REF2_5V;
    322                __delay_cycles(240);
    323                ADC10CTL0 |= ENC + ADC10SC;             // Sampling and conversion start
    324                __bis_SR_register(CPUOFF + GIE);        // LPM0 with interrupts enabled
    325                results[2] = ADC10MEM;                  // Retrieve result
    326                
    327                /* Stop and turn off ADC */
    328                ADC10CTL0 &= ~ENC;
    329                ADC10CTL0 &= ~(REFON + ADC10ON);
    330              
    331          //////////////////////////////////////////////////////////////////////////////////////////////////    
    332          
    333                /* oC = ((A10/1024)*1500mV)-986mV)*1/3.55mV = A10*423/1024 - 278
    334                 * the temperature is transmitted as an integer where 32.1 = 321
    335                 * hence 4230 instead of 423
    336                 */
    337                temp = results[0];
    338                degC = ((temp - 673) * 4230) / 1024;
    339                if( (*tempOffset) != 0xFFFF )
    340                {
    341                  degC += (*tempOffset);
    342                }
    343          
    344                temp = results[1];
    345                volt = (temp*25)/512;
    346          
    347                //MESN this is arbitrary scaling towards a 0-127 range for ASCII conversion if later desired
    348                //if this approach is actually wanted, check voltage levels and scale more appropriately
    349                //temp = (results[2] - 500)/6;
    350          
    351                temp = results[2];
    352                if(temp > 1000) //'on' cutoff point
    353                {
    354                  bend = '1';
    355                }else{
    356                  bend = '0';
    357                }
    358                /* Package up the data */
    359                msg[0] = degC&0xFF;
    360                msg[1] = (degC>>8)&0xFF;
    361                msg[2] = volt;
    362                msg[3] = bend;
    363                msg[4] = 'b';
    364                msg[5] = 'c';
    365                msg[6] = 'd';
    366          
    367                /* Send it over serial port */
    368                transmitDataString(1, addr, rssi, msg );
    369          
    370                BSP_TOGGLE_LED1();
    371          
    372                /* Done with measurement, disable measure flag */
    373                sSelfMeasureSem = 0;
    374              }
    375          
    376              /* Have we received a frame on one of the ED connections?
    377               * No critical section -- it doesn't really matter much if we miss a poll
    378               */
    379              if (sPeerFrameSem)
    380              {
    381                uint8_t     msg[MAX_APP_PAYLOAD], len, i;
    382          
    383                /* process all frames waiting */
    384                for (i=0; i<sNumCurrentPeers; ++i)
    385                {
    386                  if (SMPL_SUCCESS == SMPL_Receive(sLID[i], msg, &len))
    387                  {
    388                    ioctlRadioSiginfo_t sigInfo;
    389          
    390                    processMessage(sLID[i], msg, len);
    391          
    392                    sigInfo.lid = sLID[i];
    393          
    394                    SMPL_Ioctl(IOCTL_OBJ_RADIO, IOCTL_ACT_RADIO_SIGINFO, (void *)&sigInfo);
    395          
    396                    transmitData( i, sigInfo.sigInfo.rssi, (char*)msg );
    397                    BSP_TOGGLE_LED2();
    398          
    399                    BSP_ENTER_CRITICAL_SECTION(intState);
    400                    sPeerFrameSem--;
    401                    BSP_EXIT_CRITICAL_SECTION(intState);
    402                  }
    403                }
    404              }
    405              if (BSP_BUTTON1())
    406              {
    407                __delay_cycles(2000000);  /* debounce (0.25 seconds) */
    408                changeChannel();
    409              }
    410              else
    411              {
    412                checkChangeChannel();
    413              }
    414              BSP_ENTER_CRITICAL_SECTION(intState);
    415              if (sBlinky)
    416              {
    417                if (++sBlinky >= 0xF)
    418                {
    419                  sBlinky = 1;
    420                  BSP_TOGGLE_LED1();
    421                  BSP_TOGGLE_LED2();
    422                }
    423              }
    424              BSP_EXIT_CRITICAL_SECTION(intState);
    425            }
    426          
    427          }
    428          
    429          /* Runs in ISR context. Reading the frame should be done in the */
    430          /* application thread not in the ISR thread. */
    431          static uint8_t sCB(linkID_t lid)
    432          {
    433            if (lid)
    434            {
    435              sPeerFrameSem++;
    436              sBlinky = 0;
    437            }
    438            else
    439            {
    440              sJoinSem++;
    441            }
    442          
    443            /* leave frame to be read by application. */
    444            return 0;
    445          }
    446          
    447          static void processMessage(linkID_t lid, uint8_t *msg, uint8_t len)
    448          {
    449            //MESN not sure the below is the correct way to make the conversion from uint8_t
    450            char c[] = {"BED0"};
    451            c[3] = lid & 0xFF;
    452            char temprssi[] = {"000"};
    453            char tempMsg[] = {"abcdefgh"};
    454            
    455            if (len)
    456            {
    457              BSP_TOGGLE_LED1();
    458              /* MESN TODO: Check that this ED message sends over AP serial */
    459              transmitDataString(1, c, temprssi, msg);
    460            }
    461            
    462           
    463            return;
    464          }
    465          
    466          static void changeChannel(void)
    467          {
    468          #ifdef FREQUENCY_AGILITY
    469            freqEntry_t freq;
    470          
    471            if (++sChannel >= NWK_FREQ_TBL_SIZE)
    472            {
    473              sChannel = 0;
    474            }
    475            freq.logicalChan = sChannel;
    476            SMPL_Ioctl(IOCTL_OBJ_FREQ, IOCTL_ACT_SET, &freq);
    477            BSP_TURN_OFF_LED1();
    478            BSP_TURN_OFF_LED2();
    479            sBlinky = 1;
    480          #endif
    481            return;
    482          }
    483          
    484          /* implement auto-channel-change policy here... */
    485          static void checkChangeChannel(void)
    486          {
    487          #ifdef FREQUENCY_AGILITY
    488            int8_t dbm, inARow = 0;
    489          
    490            uint8_t i;
    491          
    492            memset(sSample, 0x0, SSIZE);
    493            for (i=0; i<SSIZE; ++i)
    494            {
    495              /* quit if we need to service an app frame */
    496              if (sPeerFrameSem || sJoinSem)
    497              {
    498                return;
    499              }
    500              NWK_DELAY(1);
    501              SMPL_Ioctl(IOCTL_OBJ_RADIO, IOCTL_ACT_RADIO_RSSI, (void *)&dbm);
    502              sSample[i] = dbm;
    503          
    504              if (dbm > INTERFERNCE_THRESHOLD_DBM)
    505              {
    506                if (++inARow == IN_A_ROW)
    507                {
    508                  changeChannel();
    509                  break;
    510                }
    511              }
    512              else
    513              {
    514                inARow = 0;
    515              }
    516            }
    517          #endif
    518            return;
    519          }
    520          
    521          /*------------------------------------------------------------------------------
    522          * ADC10 interrupt service routine
    523          ------------------------------------------------------------------------------*/
    524          #pragma vector=ADC10_VECTOR
    525          __interrupt void ADC10_ISR(void)
    526          {
    527            __bic_SR_register_on_exit(CPUOFF);        // Clear CPUOFF bit from 0(SR)
    528          }
    529          
    530          /*------------------------------------------------------------------------------
    531          * Timer A0 interrupt service routine
    532          ------------------------------------------------------------------------------*/
    533          #pragma vector=TIMERA0_VECTOR
    534          __interrupt void Timer_A (void)
    535          {
    536            sSelfMeasureSem = 1;
    537          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   ADC10_ISR
      4   Timer_A
     36   main
       36   -> BSP_Init
       36   -> COM_Init
       36   -> SMPL_Init
       36   -> SMPL_Ioctl
       36   -> SMPL_LinkListen
       36   -> SMPL_Receive
       36   -> TXString
       36   -> transmitData
       36   -> transmitDataString
       36 ?DivMod32s
       36 ?Mul32
      2   sCB


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "000">
       4  ?<Constant "000">_1
       5  ?<Constant "BED0">
       7  ?<Constant "Done\r\n">
       5  ?<Constant "HUB0">
      27  ?<Constant "\r\nInitializing Networ...">
       2  ?<Initializer for tempOffset>
      24  ??Subroutine4_1
       6  ?Subroutine0
      22  ?Subroutine1
      18  ?Subroutine2
      18  ?Subroutine3
       2  ADC10CTL0
       2  ADC10CTL1
       2  ADC10MEM
       8  ADC10_ISR
       2  ADC10_ISR::??INTVEC 10
       1  BCSCTL3
       1  P1IN
       1  P1OUT
       2  TACCR0
       2  TACCTL0
       2  TACTL
       6  Timer_A
       2  Timer_A::??INTVEC 18
     624  main
       1  sBlinky
      22  sCB
       1  sJoinSem
       8  sLID
       1  sNumCurrentPeers
       1  sPeerFrameSem
       1  sSelfMeasureSem
     339  splash
       2  tempOffset

 
 748 bytes in segment CODE
  15 bytes in segment DATA16_AN
 391 bytes in segment DATA16_C
   2 bytes in segment DATA16_I
   2 bytes in segment DATA16_ID
  13 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 
 748 bytes of CODE  memory
 393 bytes of CONST memory (+  4 bytes shared)
  15 bytes of DATA  memory (+ 15 bytes shared)

Errors: none
Warnings: 2
