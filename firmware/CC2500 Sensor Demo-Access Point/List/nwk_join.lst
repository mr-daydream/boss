###############################################################################
#
# IAR C/C++ Compiler V7.10.1.973/W32 for MSP430           29/Apr/2017  11:59:06
# Copyright 1996-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for Texas Instruments MSP430, Evaluation Version 7.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  
#        C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS
#        1155\Components\simpliciti\nwk_applications\nwk_join.c
#    Command line  =  
#        -f C:\Users\MSCOTT~1\AppData\Local\Temp\EW98B8.tmp (-f
#        "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS
#        1155\Configuration\smpl_config_AP.dat" (-DNUM_CONNECTIONS=8
#        -DSIZE_INFRAME_Q=6 -DSIZE_OUTFRAME_Q=2 "-DTHIS_DEVICE_ADDRESS={0x78,
#        0x56, 0x34, 0x12}" -DACCESS_POINT -DAP_IS_DATA_HUB
#        -DNUM_STORE_AND_FWD_CLIENTS=3 -DSTARTUP_JOINCONTEXT_ON) -f
#        "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS
#        1155\Configuration\smpl_nwk_config.dat" (-DMAX_HOPS=3
#        -DMAX_HOPS_FROM_AP=1 -DMAX_NWK_PAYLOAD=9 -DMAX_APP_PAYLOAD=10
#        -DDEFAULT_LINK_TOKEN=0x01020304 -DDEFAULT_JOIN_TOKEN=0x05060708
#        -DEXTENDED_API -DSW_TIMER) "C:\Users\mscottnelson\Downloads\IAR BOSS
#        1155\IAR BOSS 1155\Components\simpliciti\nwk_applications\nwk_join.c"
#        -D MRFI_CC2500 -lcN "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR
#        BOSS 1155\CC2500 Sensor Demo-Access Point\List" -o
#        "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS 1155\CC2500
#        Sensor Demo-Access Point\Obj" --debug -D__MSP430F2274__ -e --double=32
#        --clib -I "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS
#        1155\Components\bsp\" -I "C:\Users\mscottnelson\Downloads\IAR BOSS
#        1155\IAR BOSS 1155\Components\bsp\drivers\" -I
#        "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS
#        1155\Components\bsp\boards\EZ430RF\" -I
#        "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS
#        1155\Components\mrfi\" -I "C:\Users\mscottnelson\Downloads\IAR BOSS
#        1155\IAR BOSS 1155\Components\SimpliciTI\nwk\" -I
#        "C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS
#        1155\Components\SimpliciTI\nwk_applications\" -Ohz
#        --require_prototypes --hw_workaround=nop_after_lpm)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS 1155\CC2500
#        Sensor Demo-Access Point\List\nwk_join.lst
#    Object file   =  
#        C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS 1155\CC2500
#        Sensor Demo-Access Point\Obj\nwk_join.r43
#
###############################################################################

C:\Users\mscottnelson\Downloads\IAR BOSS 1155\IAR BOSS 1155\Components\simpliciti\nwk_applications\nwk_join.c
      1          /**************************************************************************************************
      2            Filename:       nwk_join.c
      3            Revised:        $Date: 2009-01-06 15:45:54 -0800 (Tue, 06 Jan 2009) $
      4            Revision:       $Revision: 18697 $
      5          
      6            Description:    This file supports the SimpliciTI Join network application.
      7          
      8            Copyright 2007-2009 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights granted under
     11            the terms of a software license agreement between the user who downloaded the software,
     12            his/her employer (which must be your employer) and Texas Instruments Incorporated (the
     13            "License"). You may not use this Software unless you agree to abide by the terms of the
     14            License. The License limits your use, and you acknowledge, that the Software may not be
     15            modified, copied or distributed unless embedded on a Texas Instruments microcontroller
     16            or used solely and exclusively in conjunction with a Texas Instruments radio frequency
     17            transceiver, which is integrated into your product. Other than for the foregoing purpose,
     18            you may not use, reproduce, copy, prepare derivative works of, modify, distribute,
     19            perform, display or sell this Software and/or its documentation for any purpose.
     20          
     21            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS”
     22            WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY
     23            WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.
     24            IN NO EVENT SHALL TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     25            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL EQUITABLE
     26            THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO ANY
     27            INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST
     28            DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY
     29            THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     30          
     31            Should you have any questions regarding your right to use this Software,
     32            contact Texas Instruments Incorporated at www.TI.com.
     33          **************************************************************************************************/
     34          
     35          
     36          /******************************************************************************
     37           * INCLUDES
     38           */
     39          #include <string.h>
     40          #include "bsp.h"
     41          #include "mrfi.h"
     42          #include "nwk_types.h"
     43          #include "nwk_api.h"
     44          #include "nwk_frame.h"
     45          #include "nwk.h"
     46          #include "nwk_link.h"
     47          #include "nwk_join.h"
     48          #include "nwk_globals.h"
     49          #include "nwk_freq.h"
     50          #include "nwk_security.h"
     51          #include "nwk_mgmt.h"
     52          
     53          /******************************************************************************
     54           * MACROS
     55           */
     56          
     57          /******************************************************************************
     58           * CONSTANTS AND DEFINES
     59           */
     60          
     61          /******************************************************************************
     62           * TYPEDEFS
     63           */
     64          
     65          /******************************************************************************
     66           * LOCAL VARIABLES
     67           */
     68          
     69          static          uint32_t sJoinToken = 0;
     70          static          uint8_t (*spCallback)(linkID_t) = NULL;
     71          static volatile uint8_t  sTid = 0;
     72          
     73          #ifdef ACCESS_POINT
     74          static sfInfo_t *spSandFContext = NULL;
     75          static uint8_t   sJoinOK = 0;
     76          #endif /* ACCESS_POINT */
     77          
     78          /******************************************************************************
     79           * LOCAL FUNCTIONS
     80           */
     81          #ifdef ACCESS_POINT
     82          static void     smpl_send_join_reply(mrfiPacket_t *frame);
     83          static uint32_t generateLinkToken(void);
     84          static void     handleJoinRequest(mrfiPacket_t *);
     85          #endif  /*  ACCESS_POINT */
     86          
     87          /******************************************************************************
     88           * GLOBAL VARIABLES
     89           */
     90          
     91          /******************************************************************************
     92           * GLOBAL FUNCTIONS
     93           */
     94          
     95          /******************************************************************************
     96           * @fn          nwk_joinInit
     97           *
     98           * @brief       Initialize Join application.
     99           *
    100           * input parameters
    101           *
    102           * output parameters
    103           *
    104           * @return   void
    105           */
    106          void nwk_joinInit(uint8_t (*pf)(linkID_t))
    107          {
    108            if (!sJoinToken) 
    109            {
    110              sJoinToken = DEFAULT_JOIN_TOKEN;
    111            }
    112            
    113            spCallback = pf;
    114            (void) spCallback;  /* keep compiler happy if we don't use this */
    115          
    116            sTid = MRFI_RandomByte() ;
    117          
    118          #ifdef ACCESS_POINT
    119            /* set link token to something other than deafult if desired */
    120            nwk_setLinkToken(generateLinkToken());
    121          #if defined(STARTUP_JOINCONTEXT_ON)
    122            sJoinOK = 1;
    123          #elif defined(STARTUP_JOINCONTEXT_OFF)
    124            sJoinOK = 0;
    125          #else
    126          #error ERROR: Must define either STARTUP_JOINCONTEXT_ON or STARTUP_JOINCONTEXT_OFF
    127          #endif
    128            spSandFContext = nwk_getSFInfoPtr();
    129          #endif
    130          
    131            return;
    132          }
    133          
    134          /******************************************************************************
    135           * @fn          nwk_setJoinToken
    136           *
    137           * @brief       Sets the join token.
    138           *
    139           * input parameters
    140           * @param   token   - join token to be used on this network.
    141           *
    142           * output parameters
    143           *         no room in output queue.
    144           *
    145           * @return   void
    146           */
    147          void nwk_setJoinToken(uint32_t token)
    148          {
    149            /* only set if the supplied token is non-zero. */
    150            if (token)
    151            {
    152              sJoinToken = token;
    153            }
    154          
    155            return;
    156          }
    157          
    158          /******************************************************************************
    159           * @fn          nwk_getJoinToken
    160           *
    161           * @brief       Gets the current join token.
    162           *
    163           * input parameters
    164           *
    165           * output parameters
    166           * @param   pToken   - pointer to the returned value.
    167           *
    168           * @return   Current link token
    169           */
    170          void nwk_getJoinToken(uint32_t *pToken)
    171          {
    172            /* only set if the supplied token is non-zero. */
    173            if (pToken)
    174            {
    175              *pToken = sJoinToken;
    176            }
    177          
    178            return;
    179          }
    180          
    181          /******************************************************************************
    182           * @fn          generateLinkToken
    183           *
    184           * @brief       Generate the link token to be used for the network controlled
    185           *              by this Access Point.
    186           *
    187           * input parameters
    188           *
    189           * output parameters
    190           *
    191           * @return   void
    192           */
    193          #ifdef ACCESS_POINT
    194          static uint32_t generateLinkToken(void)
    195          {
    196            return 0xDEADBEEF;
    197          }
    198          
    199          /******************************************************************************
    200           * @fn          smpl_send_join_reply
    201           *
    202           * @brief       Send the Join reply. Include the Link token. If the device is
    203           *              a polling sleeper put it into the list of store-and-forward
    204           *              clients.
    205           *
    206           * input parameters
    207           * @param   frame     - join frame for which a reply is needed...maybe
    208           *
    209           * output parameters
    210           *
    211           * @return   void
    212           */
    213          static void smpl_send_join_reply(mrfiPacket_t *frame)
    214          {
    215            frameInfo_t *pOutFrame;
    216            uint8_t      msg[JOIN_REPLY_FRAME_SIZE];
    217          
    218            /* Is this a legacy frame? If so continue. Otherwise check verion.*/
    219            if ((MRFI_GET_PAYLOAD_LEN(frame) - F_APP_PAYLOAD_OS) > JOIN_LEGACY_MSG_LENGTH)
    220            {
    221              /* see if protocol version is correct... */
    222              if (*(MRFI_P_PAYLOAD(frame)+F_APP_PAYLOAD_OS+J_PROTOCOL_VERSION_OS) != nwk_getProtocolVersion())
    223              {
    224                /* Accommodation of protocol version differences can be noted or accomplished here.
    225                 * Otherwise, no match and the board goes back
    226                 */
    227                return;
    228              }
    229            }
    230          
    231          
    232            /* see if join token is correct */
    233            {
    234              uint32_t jt;
    235          
    236              nwk_getNumObjectFromMsg(MRFI_P_PAYLOAD(frame)+F_APP_PAYLOAD_OS+J_JOIN_TOKEN_OS, &jt, sizeof(jt));
    237              if (jt != sJoinToken)
    238              {
    239                return;
    240              }
    241            }
    242          
    243            /* send reply with tid, the link token, and the encryption context */
    244            {
    245              uint32_t linkToken;
    246          
    247              nwk_getLinkToken(&linkToken);
    248              nwk_putNumObjectIntoMsg((void *)&linkToken, msg+JR_LINK_TOKEN_OS, sizeof(linkToken));
    249            }
    250            msg[JR_CRYPTKEY_SIZE_OS] = SEC_CRYPT_KEY_SIZE;
    251            msg[JB_REQ_OS]           = JOIN_REQ_JOIN | NWK_APP_REPLY_BIT;
    252            /* sender's tid... */
    253            msg[JB_TID_OS]           = *(MRFI_P_PAYLOAD(frame)+F_APP_PAYLOAD_OS+JB_TID_OS);
    254          
    255            if (pOutFrame = nwk_buildFrame(SMPL_PORT_JOIN, msg, sizeof(msg), MAX_HOPS_FROM_AP))
    256            {
    257              /* destination address is the source adddress of the received frame. */
    258              memcpy(MRFI_P_DST_ADDR(&pOutFrame->mrfiPkt), MRFI_P_SRC_ADDR(frame), NET_ADDR_SIZE);
    259          
    260          #ifdef AP_IS_DATA_HUB
    261              /* if source device supports ED objects save source address to detect duplicate joins */
    262              if (*(MRFI_P_PAYLOAD(frame)+F_APP_PAYLOAD_OS+J_NUMCONN_OS))
    263              {
    264                if (nwk_saveJoinedDevice(frame) && spCallback)
    265                {
    266                  spCallback(0);
    267                }
    268              }
    269          #endif
    270            }
    271            else
    272            {
    273              /* oops -- no room left for Tx frame. Don't send reply. */
    274              return;
    275            }
    276          
    277            /* If this device polls we need to provide store-and-forward support */
    278            if (GET_FROM_FRAME(MRFI_P_PAYLOAD(frame),F_RX_TYPE) == F_RX_TYPE_POLLS)
    279            {
    280              uint8_t loc;
    281          
    282              /* Check duplicate status */
    283              if (!nwk_isSandFClient(MRFI_P_SRC_ADDR(frame), &loc))
    284              {
    285                uint8_t        *pNumc   = &spSandFContext->curNumSFClients;
    286                sfClientInfo_t *pClient = &spSandFContext->sfClients[*pNumc];
    287          
    288                /* It's not a duplicate. Save it if there's room */
    289                if (*pNumc < NUM_STORE_AND_FWD_CLIENTS)
    290                {
    291                  memcpy(pClient->clientAddr.addr, MRFI_P_SRC_ADDR(frame), NET_ADDR_SIZE);
    292                  *pNumc = *pNumc + 1;
    293                }
    294                else
    295                {
    296                  /* No room left. Just return and don't send reply. */
    297                  return;
    298                }
    299              }
    300              else
    301              {
    302                /* We get here if it's a duplicate. We drop through and send reply.
    303                 * Reset the S&F marker in the Management application -- we should
    304                 * assume that the Client reset so the TID will be random. If this is
    305                 * simply a duplicate frame it causes no harm.
    306                 */
    307                nwk_resetSFMarker(loc);
    308              }
    309            }
    310          
    311          #ifdef SMPL_SECURE
    312              nwk_setSecureFrame(&pOutFrame->mrfiPkt, sizeof(msg), 0);
    313          #endif  /* SMPL_SECURE */
    314          
    315            /* It's not S&F or it is but we're OK to send reply. */
    316            nwk_sendFrame(pOutFrame, MRFI_TX_TYPE_FORCED);
    317          
    318            return;
    319          }
    320          
    321          /******************************************************************************
    322           * @fn          nwk_join
    323           *
    324           * @brief       Stub Join function for Access Points.
    325           *
    326           * input parameters
    327           *
    328           * output parameters
    329           *
    330           * @return   Always returns SMPL_SUCCESS.
    331           */
    332          smplStatus_t nwk_join(void)
    333          {
    334            return SMPL_SUCCESS;
    335          }
    336          
    337          /******************************************************************************
    338           * @fn          nwk_isSandFClient
    339           *
    340           * @brief       Helper function to see if the destination of a frame we have is
    341           *              one of AP's store-and-forward clients.
    342           *
    343           * input parameters
    344           * @param   fPtr     - pointer to address in frame in question
    345           *
    346           * output parameters
    347           * @param   entLoc   - pointer to receive entry location in array of clients.
    348           *
    349           * @return   Returns client info structure pointer if the destination is a
    350           *           store-and-forward client, else 0.
    351           */
    352          sfClientInfo_t *nwk_isSandFClient(uint8_t *pAddr, uint8_t *entLoc)
    353          {
    354            uint8_t i;
    355            sfClientInfo_t *pSFClient = spSandFContext->sfClients;
    356          
    357            for (i=0; i<spSandFContext->curNumSFClients; ++i, ++pSFClient)
    358            {
    359              if (!memcmp(&pSFClient->clientAddr.addr, pAddr, NET_ADDR_SIZE))
    360              {
    361                *entLoc = i;
    362                return pSFClient;
    363              }
    364            }
    365          
    366            return 0;
    367          }
    368          
    369          /******************************************************************************
    370           * @fn          nwk_setJoinContext
    371           *
    372           * @brief       Helper function to set Join context for Access Point. This will
    373           *              allow arbitration bewteen potentially nearby Access Points when
    374           *              a new device is joining.
    375           *
    376           * input parameters
    377           * @param   which   - Join context is either off or on
    378           *
    379           * output parameters
    380           *
    381           * @return   void
    382           */
    383          void nwk_setJoinContext(uint8_t which)
    384          {
    385            sJoinOK = (JOIN_CONTEXT_ON == which) ? 1 : 0;
    386          
    387            return;
    388          }
    389          
    390          /******************************************************************************
    391           * @fn          handleJoinRequest
    392           *
    393           * @brief       Dispatches handler for specfic join request
    394           *
    395           * input parameters
    396           *
    397           * @param   frame - Join frame received
    398           *
    399           * output parameters
    400           *
    401           * @return   void
    402           */
    403          static void handleJoinRequest(mrfiPacket_t *frame)
    404          {
    405            if (JOIN_LEGACY_MSG_LENGTH == (MRFI_GET_PAYLOAD_LEN(frame) - F_APP_PAYLOAD_OS))
    406            {
    407              /* Legacy frame. Spoof a join request */
    408              *(MRFI_P_PAYLOAD(frame)+F_APP_PAYLOAD_OS) = JOIN_REQ_JOIN;
    409            }
    410          
    411            switch (*(MRFI_P_PAYLOAD(frame)+F_APP_PAYLOAD_OS))
    412            {
    413              case JOIN_REQ_JOIN:
    414                smpl_send_join_reply(frame);
    415                break;
    416          
    417              default:
    418                break;
    419            }
    420          
    421            return;
    422          }
    423          
    424          #else  /* ACCESS_POINT */
    425          
    426          /******************************************************************************
    427           * @fn          nwk_join
    428           *
    429           * @brief       Join functioanlity for non-AP devices. Send the Join token
    430           *              and wait for the reply.
    431           *
    432           * input parameters
    433           *
    434           * output parameters
    435           *
    436           * @return   Status of operation.
    437           */
    438          smplStatus_t nwk_join(void)
    439          {
    440            uint8_t      msg[JOIN_FRAME_SIZE];
    441            uint32_t     linkToken;
    442            addr_t       apAddr;
    443            uint8_t      radioState = MRFI_GetRadioState();
    444            smplStatus_t rc = SMPL_NO_JOIN;
    445            union
    446            {
    447              ioctlRawSend_t    send;
    448              ioctlRawReceive_t recv;
    449            } ioctl_info;
    450          
    451          #if defined( FREQUENCY_AGILITY )
    452            uint8_t  i, numChan;
    453            freqEntry_t channels[NWK_FREQ_TBL_SIZE];
    454          
    455            if (!(numChan=nwk_scanForChannels(channels)))
    456            {
    457              return SMPL_NO_CHANNEL;
    458            }
    459          
    460            for (i=0; i<numChan; ++i)
    461            {
    462              nwk_setChannel(&channels[i]);
    463          #else
    464            {
    465          #endif
    466          
    467              ioctl_info.send.addr = (addr_t *)nwk_getBCastAddress();
    468              ioctl_info.send.msg  = msg;
    469              ioctl_info.send.len  = sizeof(msg);
    470              ioctl_info.send.port = SMPL_PORT_JOIN;
    471          
    472              /* Put join token in */
    473              nwk_putNumObjectIntoMsg((void *)&sJoinToken, msg+J_JOIN_TOKEN_OS, sizeof(sJoinToken));
    474              /* set app info byte */
    475              msg[JB_REQ_OS] = JOIN_REQ_JOIN;
    476              msg[JB_TID_OS] = sTid;
    477              /* Set number of connections supported. Used only by AP if it is
    478               * a data hub.
    479               */
    480              msg[J_NUMCONN_OS] = NUM_CONNECTIONS;
    481              /* protocol version number */
    482              msg[J_PROTOCOL_VERSION_OS] = nwk_getProtocolVersion();
    483          
    484              SMPL_Ioctl(IOCTL_OBJ_RAW_IO, IOCTL_ACT_WRITE, &ioctl_info.send);
    485          
    486              ioctl_info.recv.port = SMPL_PORT_JOIN;
    487              ioctl_info.recv.msg  = msg;
    488              ioctl_info.recv.addr = &apAddr;    /* save AP address from reply */
    489          
    490              NWK_CHECK_FOR_SETRX(radioState);
    491              NWK_REPLY_DELAY();
    492              NWK_CHECK_FOR_RESTORE_STATE(radioState);
    493          
    494              if (SMPL_SUCCESS == SMPL_Ioctl(IOCTL_OBJ_RAW_IO, IOCTL_ACT_READ, &ioctl_info.recv))
    495              {
    496                uint8_t firstByte = msg[JB_REQ_OS] & (~NWK_APP_REPLY_BIT);
    497          
    498                /* Sanity check for correct reply frame. Older version
    499                 * has the length instead of the request as the first byte.
    500                 */
    501                if ((firstByte == JOIN_REQ_JOIN) ||
    502                    (firstByte == JOIN_REPLY_LEGACY_MSG_LENGTH)
    503                   )
    504                {
    505                  /* join reply returns link token */
    506                  memcpy(&linkToken, msg+JR_LINK_TOKEN_OS, sizeof(linkToken));
    507          
    508                  nwk_setLinkToken(linkToken);
    509                  /* save AP address */
    510                  nwk_setAPAddress(&apAddr);
    511                  sTid++;   /* guard against duplicates */
    512                  rc = SMPL_SUCCESS;
    513          #if defined( FREQUENCY_AGILITY )
    514                  break;
    515          #endif
    516                }
    517              }
    518              /* TODO: process encryption stuff */
    519            }
    520          
    521            return rc;
    522          
    523          }
    524          
    525          #endif /* ACCESS_POINT */
    526          
    527          /******************************************************************************
    528           * @fn          nwk_processJoin
    529           *
    530           * @brief       Processes a Join frame. If this is a reply let it go to the
    531           *              application. Otherwise generate and send the reply.
    532           *
    533           * input parameters
    534           * @param   frame     - Pointer to Join frame
    535           *
    536           * output parameters
    537           *
    538           * @return   Keep frame for application, release frame, or replay frame.
    539           */
    540          fhStatus_t nwk_processJoin(mrfiPacket_t *frame)
    541          {
    542            fhStatus_t rc = FHS_RELEASE;
    543            uint8_t    replyType;
    544          
    545            /* Make sure this is a reply and see if we sent this. Validate the
    546             * packet for reception by client app.
    547             */
    548            if (SMPL_MY_REPLY == (replyType=nwk_isValidReply(frame, sTid, JB_REQ_OS, JB_TID_OS)))
    549            {
    550              /* It's a match and it's a reply. Validate the received packet by
    551               * returning a 1 so it can be received by the client app.
    552               */
    553              MRFI_PostKillSem();
    554              rc = FHS_KEEP;
    555            }
    556          #if defined(ACCESS_POINT)
    557            else if (SMPL_A_REPLY == replyType)
    558            {
    559              /* No match. If I'm not an ED this is a reply that should be passed on. */
    560              rc = FHS_REPLAY;
    561            }
    562            else
    563            {
    564              /* Send reply if we're an Access Point otherwise ignore the frame. */
    565              if ((SMPL_NOT_REPLY == replyType) && sJoinOK)
    566              {
    567                handleJoinRequest(frame);
    568              }
    569            }
    570          #elif defined(RANGE_EXTENDER)
    571            else
    572            {
    573              /* Either a reply that has to be replayed or a request that
    574               * also must be replayed.
    575               */
    576              rc = FHS_REPLAY;
    577            }
    578          #endif /* not END_DEVICE */
    579          
    580            (void) replyType;  /* keep compiler happy */
    581          
    582            return rc;
    583          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      2   nwk_getJoinToken
     12   nwk_isSandFClient
       12   -> memcmp
       12 ?Epilogue5
      2   nwk_join
      2   nwk_joinInit
        2   -> MRFI_RandomByte
        2   -> nwk_getSFInfoPtr
        2   -> nwk_setLinkToken
      6   nwk_processJoin
        6   -> MRFI_PostKillSem
        6   -> nwk_isValidReply
        6   -> smpl_send_join_reply
      2   nwk_setJoinContext
      2   nwk_setJoinToken
     22   smpl_send_join_reply
       22   -- Indirect call
       22   -> memcpy
       22   -> nwk_buildFrame
       22   -> nwk_getLinkToken
       22   -> nwk_getNumObjectFromMsg
       22   -> nwk_getProtocolVersion
       22   -> nwk_isSandFClient
       22   -> nwk_putNumObjectIntoMsg
       22   -> nwk_resetSFMarker
       22   -> nwk_saveJoinedDevice
       22   -> nwk_sendFrame
        8 ?Epilogue3


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  nwk_getJoinToken
      64  nwk_isSandFClient
       4  nwk_join
      62  nwk_joinInit
      88  nwk_processJoin
      14  nwk_setJoinContext
      18  nwk_setJoinToken
       1  sJoinOK
       4  sJoinToken
       1  sTid
     264  smpl_send_join_reply
       2  spCallback
       2  spSandFContext

 
 532 bytes in segment CODE
  10 bytes in segment DATA16_Z
 
 532 bytes of CODE memory
  10 bytes of DATA memory

Errors: none
Warnings: none
